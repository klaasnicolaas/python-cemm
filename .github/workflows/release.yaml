---
name: Release

# yamllint disable-line rule:truthy
# yamllint disable-line rule:truthy
on:
  release:
    types:
      - published

jobs:
  release:
    name: Releasing to PyPi
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: 🏗 Set up Python 3.9
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: 🏗 Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: ⤵️ Restore cached Python PIP packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-v1-${{ steps.python.outputs.python-version }}-${{ hashFiles('.github/workflows/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-v1-${{ steps.python.outputs.python-version }}-
      - name: 🏗 Install workflow dependencies
        run: |
          pip install -r .github/workflows/requirements.txt
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: ⤵️ Restore cached Python virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: >-
            venv-${{ runner.os }}-v1-${{ steps.python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
            venv-${{ runner.os }}-v1-${{ steps.python.outputs.python-version }}-
      - name: 🏗 Install dependencies
        run: poetry install --no-interaction
      - name: 🏗 Set package version
        run: |
          version="${{ github.event.release.tag_name }}"
          version="${version,,}"
          version="${version#v}"
          poetry version --no-interaction "${version}"
      - name: 🏗 Build package
        run: poetry build --no-interaction
      - name: 🚀 Publish to PyPi
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi "${PYPI_TOKEN}"
          poetry publish --no-interaction

  twitter:
    name: 🐦 Tweet the release
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: Eomm/why-don-t-you-tweet@v1
        with:
          # GitHub event payload
          # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#release
          tweet-message: |
            ⬆️ ${{ github.event.release.tag_name }} of ${{ github.event.repository.name }} just released 🎉 #update @klaasnicolaas #python #package #cemm #cedel #release #bot #assistant

            Check out the release notes here: ${{ github.event.release.html_url }}
        env:
          # Get your tokens from https://developer.twitter.com/apps
          TWITTER_CONSUMER_API_KEY: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
          TWITTER_CONSUMER_API_SECRET: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
